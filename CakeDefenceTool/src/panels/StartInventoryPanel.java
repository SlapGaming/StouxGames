/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package panels;

import Frame.MainFrame;
import customelements.multilinetable.MultiLineTableCellRenderer;
import entity.collections.RewardCollection;
import entity.instance.Item;
import entity.instance.PotionItem;
import entity.main.StartReward;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import logic.Controller;
import panels.interfaces.PanelInterface;
import panels.interfaces.RewardCallable;
import panels.rewards.RewardPanel;
import panels.rounds.RoundsPanel;

/**
 *
 * @author Leon
 */
public class StartInventoryPanel extends javax.swing.JPanel implements RewardCallable, PanelInterface {

    private HashMap<Table, Item> singleItemMap;
    private ArrayList<Item> startInventory;
    private HashMap<Table, JTable> tableMap;
    
    private RewardPanel rewardPanel;
    
    /**
     * Creates new form StartInventoryPanel
     */
    public StartInventoryPanel() {
        MainFrame.getFrame().resetButtons();
        
        //Setup
        singleItemMap = new HashMap<>();
        startInventory = new ArrayList<>();
        tableMap = new HashMap<>();
                
        initComponents();
        MainFrame.setPanel(rewardPanelHolder, (rewardPanel=new RewardPanel(this)));
        DefaultComboBoxModel tableModel = (DefaultComboBoxModel) tableComboBox.getModel();
        tableModel.removeAllElements();
        for (Table table : Table.values()) {
            tableModel.addElement(table);
            
            switch (table) {
                case HelmetTable:       tableMap.put(table, helmetTable);        break;
                case ChestplateTable:   tableMap.put(table, chestplateTable);   break;
                case LeggingsTable:     tableMap.put(table, leggingsTable);     break;
                case BootsTable:        tableMap.put(table, bootsTable);        break;
                case InventoryTable:    tableMap.put(table, inventoryTable);    break;
            }
        }
        
        tableComboBox.setSelectedIndex(0);
        currentTable = (Table) tableComboBox.getSelectedItem();
        
        for (JTable table : tableMap.values()) {
            table.setDefaultRenderer(Object.class, new MultiLineTableCellRenderer());
        }
        
        StartReward sr = Controller.getInstance().getRoutine().getStartReward();
        if (sr != null) {
            singleItemMap.put(Table.BootsTable, sr.getBoots());
            singleItemMap.put(Table.LeggingsTable, sr.getLegs());
            singleItemMap.put(Table.ChestplateTable, sr.getChest());
            singleItemMap.put(Table.HelmetTable, sr.getHead());
            startInventory = sr.getStartInventory().getItems();
            
            //Update tables
            updateTable(Table.BootsTable);
            updateTable(Table.LeggingsTable);
            updateTable(Table.ChestplateTable);
            updateTable(Table.HelmetTable);
            updateTable(Table.InventoryTable);
        }
    }
    
    private void updateTable(Table table) {
        DefaultTableModel model = (DefaultTableModel) tableMap.get(table).getModel();
        model.setRowCount(0);
        if (table != Table.InventoryTable) {
            Item item = singleItemMap.get(table);
            if (item != null) {
                model.addRow(new Object[] {item.getItemType().getDisplayname(), item.getEnchantsString()});
            }
        } else {
            for (Item item : startInventory) {
                if (item instanceof PotionItem) {
                    PotionItem pItem = item.getPotion();
                    String extra = pItem.getType().getDisplayname();
                    if (pItem.isSplash()) extra = extra + " (Splash)";
                    model.addRow(new Object[]{item.getItemType().getDisplayname(), 1, extra});
                } else {
                    model.addRow(new Object[]{item.getItemType().getDisplayname(), item.getAmount(), item.getEnchantsString()});
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        leggingsPanel = new javax.swing.JPanel();
        leggingsLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        leggingsTable = new javax.swing.JTable();
        helmetPanel = new javax.swing.JPanel();
        helmetLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        helmetTable = new javax.swing.JTable();
        chestplatePanel = new javax.swing.JPanel();
        chestplateLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        chestplateTable = new javax.swing.JTable();
        bootsPanel = new javax.swing.JPanel();
        bootsLabel = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        bootsTable = new javax.swing.JTable();
        inventoryPanel = new javax.swing.JPanel();
        inventoryLabel = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        inventoryTable = new javax.swing.JTable();
        rewardPanelHolder = new javax.swing.JPanel();
        tableSelectorPanel = new javax.swing.JPanel();
        tableComboBox = new javax.swing.JComboBox();
        tableSelectorLabel = new javax.swing.JLabel();

        leggingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 0)));

        leggingsLabel.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        leggingsLabel.setText("Leggings:");

        leggingsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Enchants"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        leggingsTable.getTableHeader().setReorderingAllowed(false);
        leggingsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                leggingsTableMouseClicked(evt);
            }
        });
        leggingsTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                leggingsTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(leggingsTable);
        leggingsTable.getColumnModel().getColumn(0).setMinWidth(75);
        leggingsTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        leggingsTable.getColumnModel().getColumn(0).setMaxWidth(200);

        javax.swing.GroupLayout leggingsPanelLayout = new javax.swing.GroupLayout(leggingsPanel);
        leggingsPanel.setLayout(leggingsPanelLayout);
        leggingsPanelLayout.setHorizontalGroup(
            leggingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leggingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(leggingsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        leggingsPanelLayout.setVerticalGroup(
            leggingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leggingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leggingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(leggingsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        helmetPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 0)));

        helmetLabel.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        helmetLabel.setText("Helmet:");

        helmetTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Enchants"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        helmetTable.getTableHeader().setReorderingAllowed(false);
        helmetTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                helmetTableMouseClicked(evt);
            }
        });
        helmetTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                helmetTableKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(helmetTable);
        helmetTable.getColumnModel().getColumn(0).setMinWidth(75);
        helmetTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        helmetTable.getColumnModel().getColumn(0).setMaxWidth(200);

        javax.swing.GroupLayout helmetPanelLayout = new javax.swing.GroupLayout(helmetPanel);
        helmetPanel.setLayout(helmetPanelLayout);
        helmetPanelLayout.setHorizontalGroup(
            helmetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(helmetPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(helmetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        helmetPanelLayout.setVerticalGroup(
            helmetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(helmetPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(helmetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(helmetLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        chestplatePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 0)));

        chestplateLabel.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        chestplateLabel.setText("Chestplate:");

        chestplateTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Enchants"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        chestplateTable.getTableHeader().setReorderingAllowed(false);
        chestplateTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chestplateTableMouseClicked(evt);
            }
        });
        chestplateTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                chestplateTableKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(chestplateTable);
        chestplateTable.getColumnModel().getColumn(0).setMinWidth(75);
        chestplateTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        chestplateTable.getColumnModel().getColumn(0).setMaxWidth(200);

        javax.swing.GroupLayout chestplatePanelLayout = new javax.swing.GroupLayout(chestplatePanel);
        chestplatePanel.setLayout(chestplatePanelLayout);
        chestplatePanelLayout.setHorizontalGroup(
            chestplatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chestplatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chestplateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 850, Short.MAX_VALUE)
                .addContainerGap())
        );
        chestplatePanelLayout.setVerticalGroup(
            chestplatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chestplatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(chestplatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(chestplateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bootsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 0)));

        bootsLabel.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        bootsLabel.setText("Boots:");

        bootsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Enchants"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bootsTable.getTableHeader().setReorderingAllowed(false);
        bootsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bootsTableMouseClicked(evt);
            }
        });
        bootsTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                bootsTableKeyReleased(evt);
            }
        });
        jScrollPane6.setViewportView(bootsTable);
        bootsTable.getColumnModel().getColumn(0).setMinWidth(75);
        bootsTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        bootsTable.getColumnModel().getColumn(0).setMaxWidth(200);

        javax.swing.GroupLayout bootsPanelLayout = new javax.swing.GroupLayout(bootsPanel);
        bootsPanel.setLayout(bootsPanelLayout);
        bootsPanelLayout.setHorizontalGroup(
            bootsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bootsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bootsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 850, Short.MAX_VALUE)
                .addContainerGap())
        );
        bootsPanelLayout.setVerticalGroup(
            bootsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bootsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bootsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(bootsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        inventoryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 0)));

        inventoryLabel.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        inventoryLabel.setText("Inventory:");

        inventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Amount", "Enchants"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        inventoryTable.getTableHeader().setReorderingAllowed(false);
        inventoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inventoryTableMouseClicked(evt);
            }
        });
        inventoryTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inventoryTableKeyReleased(evt);
            }
        });
        jScrollPane7.setViewportView(inventoryTable);
        inventoryTable.getColumnModel().getColumn(0).setMinWidth(75);
        inventoryTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        inventoryTable.getColumnModel().getColumn(0).setMaxWidth(200);
        inventoryTable.getColumnModel().getColumn(1).setMinWidth(75);
        inventoryTable.getColumnModel().getColumn(1).setPreferredWidth(100);
        inventoryTable.getColumnModel().getColumn(1).setMaxWidth(150);

        javax.swing.GroupLayout inventoryPanelLayout = new javax.swing.GroupLayout(inventoryPanel);
        inventoryPanel.setLayout(inventoryPanelLayout);
        inventoryPanelLayout.setHorizontalGroup(
            inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inventoryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inventoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 850, Short.MAX_VALUE)
                .addContainerGap())
        );
        inventoryPanelLayout.setVerticalGroup(
            inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inventoryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(inventoryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout rewardPanelHolderLayout = new javax.swing.GroupLayout(rewardPanelHolder);
        rewardPanelHolder.setLayout(rewardPanelHolderLayout);
        rewardPanelHolderLayout.setHorizontalGroup(
            rewardPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        rewardPanelHolderLayout.setVerticalGroup(
            rewardPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        tableComboBox.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tableComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableComboBoxActionPerformed(evt);
            }
        });

        tableSelectorLabel.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tableSelectorLabel.setText("Select table:");

        javax.swing.GroupLayout tableSelectorPanelLayout = new javax.swing.GroupLayout(tableSelectorPanel);
        tableSelectorPanel.setLayout(tableSelectorPanelLayout);
        tableSelectorPanelLayout.setHorizontalGroup(
            tableSelectorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tableSelectorPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(tableSelectorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tableComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        tableSelectorPanelLayout.setVerticalGroup(
            tableSelectorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tableSelectorPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(tableSelectorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tableComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tableSelectorLabel)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(helmetPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(leggingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chestplatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bootsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(inventoryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rewardPanelHolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tableSelectorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(helmetPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chestplatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(leggingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bootsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inventoryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableSelectorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rewardPanelHolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private Table currentTable;
    
    private void tableComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableComboBoxActionPerformed
        Table foundTable = (Table) tableComboBox.getSelectedItem();
        if (foundTable != currentTable) {
            currentTable = foundTable;
            rewardPanel.setItemGroup(foundTable.getGroup());
            if (foundTable == Table.InventoryTable) {
                rewardPanel.setAllowSplit(true);
            } else {
                rewardPanel.setAllowSplit(false);
            }
        }
    }//GEN-LAST:event_tableComboBoxActionPerformed
    
    private void removeRow(Table clickedTable, int row) {
        String[] options = new String[] {"Remove item", "Cancel"};
        int result = JOptionPane.showOptionDialog(MainFrame.getFrame(), "<html><center>Are you sure you want to remove this item?</center></html>", "Choose an option!", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if (result != 0) return;
        if (clickedTable == Table.InventoryTable) {
            startInventory.remove(row);
        } else {
            singleItemMap.remove(clickedTable);
        }
        updateTable(currentTable);
    }
    
    private void tableMouseClicked(Table clickedTable, MouseEvent evt) {
        if (evt.getClickCount() == 2) {
            int row = tableMap.get(clickedTable).rowAtPoint(evt.getPoint());
            if (row != -1) {
                removeRow(clickedTable, row);
            }
        }
    }
    
    private void tableKeyClicked(Table clickedTable, KeyEvent evt) {
        if (evt.getKeyCode() == 127) {
            int row = tableMap.get(clickedTable).getSelectedRow();
            if (row != 1) {
                removeRow(clickedTable, row);
            }
        }
    }
    
    
    
    
    private void helmetTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helmetTableMouseClicked
        tableMouseClicked(Table.HelmetTable, evt);
    }//GEN-LAST:event_helmetTableMouseClicked

    private void chestplateTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chestplateTableMouseClicked
        tableMouseClicked(Table.ChestplateTable, evt);
    }//GEN-LAST:event_chestplateTableMouseClicked

    private void leggingsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leggingsTableMouseClicked
        tableMouseClicked(Table.LeggingsTable, evt);
    }//GEN-LAST:event_leggingsTableMouseClicked

    private void bootsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bootsTableMouseClicked
        tableMouseClicked(Table.BootsTable, evt);
    }//GEN-LAST:event_bootsTableMouseClicked

    private void inventoryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inventoryTableMouseClicked
        tableMouseClicked(Table.InventoryTable, evt);
    }//GEN-LAST:event_inventoryTableMouseClicked

    private void helmetTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_helmetTableKeyReleased
        tableKeyClicked(Table.HelmetTable, evt);
    }//GEN-LAST:event_helmetTableKeyReleased

    private void chestplateTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chestplateTableKeyReleased
        tableKeyClicked(Table.ChestplateTable, evt);
    }//GEN-LAST:event_chestplateTableKeyReleased

    private void leggingsTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_leggingsTableKeyReleased
        tableKeyClicked(Table.LeggingsTable, evt);
    }//GEN-LAST:event_leggingsTableKeyReleased

    private void bootsTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bootsTableKeyReleased
        tableKeyClicked(Table.BootsTable, evt);
    }//GEN-LAST:event_bootsTableKeyReleased

    private void inventoryTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inventoryTableKeyReleased
        tableKeyClicked(Table.InventoryTable, evt);
    }//GEN-LAST:event_inventoryTableKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bootsLabel;
    private javax.swing.JPanel bootsPanel;
    private javax.swing.JTable bootsTable;
    private javax.swing.JLabel chestplateLabel;
    private javax.swing.JPanel chestplatePanel;
    private javax.swing.JTable chestplateTable;
    private javax.swing.JLabel helmetLabel;
    private javax.swing.JPanel helmetPanel;
    private javax.swing.JTable helmetTable;
    private javax.swing.JLabel inventoryLabel;
    private javax.swing.JPanel inventoryPanel;
    private javax.swing.JTable inventoryTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel leggingsLabel;
    private javax.swing.JPanel leggingsPanel;
    private javax.swing.JTable leggingsTable;
    private javax.swing.JPanel rewardPanelHolder;
    private javax.swing.JComboBox tableComboBox;
    private javax.swing.JLabel tableSelectorLabel;
    private javax.swing.JPanel tableSelectorPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addReward(Item item) {
        if (currentTable != Table.InventoryTable) {
            singleItemMap.put(currentTable, item);
        } else {
            startInventory.add(item);
        }
    }

    @Override
    public void update() {
        updateTable(currentTable);
    }

    @Override
    public String getTitle() {
        return "Start Inventory";
    }

    @Override
    public String getHelp() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void next() {
        StartReward sr = new StartReward(
                singleItemMap.get(Table.BootsTable),
                singleItemMap.get(Table.LeggingsTable),
                singleItemMap.get(Table.ChestplateTable),
                singleItemMap.get(Table.HelmetTable),
                new RewardCollection(startInventory));
        Controller.getInstance().getRoutine().setStartReward(sr);
        MainFrame.getFrame().setPanel(new RoundsPanel());
    }

    @Override
    public void back() {
        MainFrame.getFrame().setPanel(new GeneralSettingsPanel());
    }
    
    private enum Table {
        HelmetTable("Helmets", 1),
        ChestplateTable("Chestplates", 2),
        LeggingsTable("Leggings", 3),
        BootsTable("Boots", 4),
        InventoryTable("Inventory", 0);
        
        private String name;
        private int group;
        private Table(String name, int group) {
            this.name = name;
            this.group = group;
        }

        @Override
        public String toString() {
            return name;
        }

        public int getGroup() {
            return group;
        }
    }
}
