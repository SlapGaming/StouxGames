/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package panels.rounds;

import Frame.MainFrame;
import entity.collections.RewardCollection;
import entity.collections.Round;
import entity.instance.Mob;
import entity.main.Routine;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import logic.Controller;
import panels.GeneralSettingsPanel;
import panels.SelectPanel;
import panels.StartInventoryPanel;
import panels.interfaces.PanelInterface;

/**
 *
 * @author Leon
 */
public class RoundsPanel extends javax.swing.JPanel implements PanelInterface {
   
    //Root of the tree
    private DefaultTreeModel model;
    
    /**
     * Creates new form RoundPanel
     */
    public RoundsPanel() {
        initComponents();
        model = (DefaultTreeModel) roundTree.getModel();
        updateTree();
    }
 
    public void updateTree() {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Rounds", true);
        Routine routine = Controller.getInstance().getRoutine();
        int roundNumber = 1;
        for (Round round : routine.getRounds()) {
            DefaultMutableTreeNode roundNode = new DefaultMutableTreeNode("Round: " + roundNumber, true);
            int mobs = 0;
            for (Mob mob : round.getMobs()) {
                mobs = mobs + mob.getAmount();
            }
            roundNode.add(new DefaultMutableTreeNode("Mobs: " + mobs, true));
            roundNode.add(getRewardNode("Good", round.getGood()));
            roundNode.add(getRewardNode("Mediocre", round.getMediocre()));
            roundNode.add(getRewardNode("Bad", round.getBad()));
            roundNode.add(getRewardNode("Everyone", round.getEveryone()));
            root.add(roundNode);
            roundNumber++;
        }
        model.setRoot(root);
        MainFrame.getFrame().updateSidebar();
        setButtons();
    }
    
    protected void setButtons() {
        MainFrame mf = MainFrame.getFrame();
        mf.resetButtons();
        mf.setNextButtonText("Finish");
        if (Controller.getInstance().getRoutine().getRounds().isEmpty()) {
            mf.setNextButtonEnabled(false);
        }
    }
    
    private DefaultMutableTreeNode getRewardNode(String header, RewardCollection reward) {
        int numberOfItems = reward.getItems().size();
        if (numberOfItems == 0) {
            return new DefaultMutableTreeNode(header + ": Empty", false);
        } else {
            return new DefaultMutableTreeNode(header + ": " + numberOfItems + " itemstacks", false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        addRoundButton = new javax.swing.JButton();
        removeRoundButton = new javax.swing.JButton();
        editRoundButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        roundTree = new javax.swing.JTree();

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 0)));

        addRoundButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addRoundButton.setText("Add Round");
        addRoundButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoundButtonActionPerformed(evt);
            }
        });

        removeRoundButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        removeRoundButton.setText("Remove Round");
        removeRoundButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRoundButtonActionPerformed(evt);
            }
        });

        editRoundButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        editRoundButton.setText("Edit Round");
        editRoundButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editRoundButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addRoundButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeRoundButton, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                    .addComponent(editRoundButton, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addRoundButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeRoundButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editRoundButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Rounds");
        roundTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane2.setViewportView(roundTree);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addRoundButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoundButtonActionPerformed
        Controller
                .getInstance()
                .getFrame()
                .setPanel(new RoundPanel(this));
    }//GEN-LAST:event_addRoundButtonActionPerformed

    public int getSelectedRound() {
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) roundTree.getLastSelectedPathComponent();
        if (selectedNode == null) return -1;
        if (selectedNode.isRoot()) return -1;
        if (selectedNode.isLeaf()) {
            DefaultMutableTreeNode parent = (DefaultMutableTreeNode) selectedNode.getParent();
            return parseRound(parent.getUserObject());
        } else {
            return parseRound(selectedNode.getUserObject());
        }
    }
    
    private int parseRound(Object round) {
        String s = (String) round;
        if (s.contains("Round: ")) {
            try {
                return Integer.parseInt(s.replace("Round: ", ""));
            } catch (NumberFormatException e) {
                return -1;
            }
        }
        return -1;
    }
    
    
    private void removeRoundButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRoundButtonActionPerformed
        int round = getSelectedRound();
        if (round == -1) {
            MainFrame.throwError("No round selected!");
            return;
        }
        int result = JOptionPane.showConfirmDialog(MainFrame.getFrame(), "Are you sure you want to remove this round?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result != 0) return;
        ArrayList<Round> rounds = Controller.getInstance().getRoutine().getRounds();
        rounds.remove(round - 1);
        updateTree();
    }//GEN-LAST:event_removeRoundButtonActionPerformed

    private void editRoundButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editRoundButtonActionPerformed
        int round = getSelectedRound();
        if (round == -1) {
            MainFrame.throwError("No round selected!");
            return;
        }
        RoundPanel rP = new RoundPanel(this);
        rP.editRound(Controller.getInstance().getRoutine().getRounds().get(round - 1));
        MainFrame
                .getFrame()
                .setPanel(rP);
    }//GEN-LAST:event_editRoundButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRoundButton;
    private javax.swing.JButton editRoundButton;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton removeRoundButton;
    private javax.swing.JTree roundTree;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getTitle() {
        return "Rounds";
    }

    @Override
    public String getHelp() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void next() {
        boolean saved = Controller.getInstance().saveRoutine();
        if (saved) {
            String[] options = new String[]{"Return to first screen", "Create new routine", "Load a routine", "Exit program", "Nothing"};
            int result = JOptionPane.showOptionDialog(MainFrame.getFrame(), 
                    "<html><center>What do you want to do now?</center></html>", "Choose an option!", 
                    JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
            switch (result) {
                case 0: //Return to first screen
                    MainFrame.getFrame().setPanel(new SelectPanel());
                    return;
                case 1: //Create new routine
                    Controller.getInstance().createNewRoutine();
                    break;
                case 2: //Load routine
                    boolean loaded = Controller.getInstance().loadRoutine(false);
                    if (!loaded) return;
                    break;
                case 3: //Exit program
                    System.exit(0);
                    return;
                default: //Nothing
                    return;
            }
            MainFrame.getFrame().setPanel(new GeneralSettingsPanel());
        }
    }

    @Override
    public void back() {
        MainFrame.getFrame().setPanel(new StartInventoryPanel());
    }
}
